$(document).ready(function () {
    new ScrollFlow();
});


ScrollFlow = function (options) {
    this.init(options);
}

$.extend(ScrollFlow.prototype, {
    init: function (options) {
        this.options = $.extend({
            durationOnResize: 250,
            durationOnScroll: 500
        }, options);


        this.bindScroll();
    },

    bindScroll: function () {
        var $this = this;

        $(window).scroll(function () {
            $this.update();
        });

        $(window).bind("gesturechange", function () {
            $this.update();
        });
    },


    update: function (forcedDuration) {
        var $this = this;

        winHeight = $(window).height();
        scrollTop = $(window).scrollTop();

        $(".scrollflow").each(function (key, obj) {
            objOffset = $(obj).offset();
            objOffsetTop = parseInt(objOffset.top);

            // request object settings
            effectDuration = $this.options.durationOnScroll;
            effectDuration = typeof (forcedDuration) != "undefined" ? forcedDuration : effectDuration;
            effectiveFromPercentage = (!isNaN(parseInt($(obj).attr("data-scrollflow-start") / 100)) ? parseInt($(obj).attr("data-scrollflow-start")) / 100 : -0.25);
            scrollDistancePercentage = (!isNaN(parseInt($(obj).attr("data-scrollflow-distance") / 100)) ? parseInt($(obj).attr("data-scrollflow-distance")) / 100 : 0.5);
            effectiveFrom = objOffsetTop - winHeight * (1 - effectiveFromPercentage);
            effectiveTo = objOffsetTop - winHeight * (1 - scrollDistancePercentage);
            // end object settings


            if (scrollTop > effectiveFrom) {
                factor = (scrollTop - effectiveFrom) / (effectiveTo - effectiveFrom);
                factor = (factor > 1 ? 1 : factor);
            }

            options = {
                opacity: 1,
                scale: 1,
                translateX: 0,
                translateY: 0
            };

            if ($(obj).hasClass("-opacity")) {
                options.opacity = 0 + factor;
            }

            if ($(obj).hasClass("-slide-left")) {
                options.translateX = (-550 + factor * 650) * -1;
            }



            $(obj).css({
                webkitFilter: "opacity(" + options.opacity + ")",
                mozFilter: "opacity(" + options.opacity + ")",
                oFilter: "opacity(" + options.opacity + ")",
                msFilter: "opacity(" + options.opacity + ")",
                filter: "opacity(" + options.opacity + ")",

                webkitTransform: "translate3d( " + parseInt(options.translateX) + "px, " + parseInt(options.translateY) + "px, 0px ) scale(" + options.scale + ")",
                mozTransform: "translate3d( " + parseInt(options.translateX) + "px, " + parseInt(options.translateY) + "px, 0px ) scale(" + options.scale + ")",
                oTransform: "translate3d( " + parseInt(options.translateX) + "px, " + parseInt(options.translateY) + "px, 0px ) scale(" + options.scale + ")",
                msTransform: "translate3d( " + parseInt(options.translateX) + "px, " + parseInt(options.translateY) + "px, 0px ) scale(" + options.scale + ")",
                transform: "translate3d( " + parseInt(options.translateX) + "px, " + parseInt(options.translateY) + "px, 0px ) scale(" + options.scale + ")",

                transition: "all " + effectDuration + "ms ease-out"
            });
        });

        return;

    }
});
